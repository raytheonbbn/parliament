<?xml version="1.0" encoding="utf-8"?>

<project name="Parliament" default="deliverArtifacts" xmlns:ivy="antlib:org.apache.ivy.ant">
	<description>Builds Parliament's native code and closely related Java code.</description>

	<import file="${basedir}/../build-common.xml"/>

	<property name="binDir" value="${targetDir}/bin/${ant.project.name}"/>
	<property name="testBinDir" value="${targetDir}/test-bin/${ant.project.name}"/>
	<property name="jarFile" value="${artifactsDir}/${ant.project.name}.jar"/>
	<property name="jniHdrDir" value="${basedir}/KbCore/parliament/generated"/>
	<property name="junitFlagFile" value="${binDir}/junitFlagFile.txt"/>
	<property name="daemonBinDir" value="${targetDir}/bin/daemon"/>

	<target name="deliverArtifacts" depends="jar">
		<!-- Find the name of the current platform -->
		<if>
			<os family="winnt"/>
			<then>
				<property name="platform" value="win"/>
			</then>
			<elseif>
				<os family="mac"/>
				<then>
					<property name="platform" value="mac"/>
				</then>
			</elseif>
			<elseif>
				<and>
					<os family="unix"/>
					<isset property="env.LINUX_DISTRO"/>
				</and>
				<then>
					<property name="platform" value="${env.LINUX_DISTRO}"/>
				</then>
			</elseif>
			<else>
				<fail>
					Either this is an unsupported platform (something other than Windows,
					Mac OS, or Linux), or this is a Linux platform, but the LINUX_DISTRO
					environment variable has not been set.
				</fail>
			</else>
		</if>

		<!-- Find the boost.build toolset to use for the current platform -->
		<condition property="genericToolset" value="msvc">
			<os family="winnt"/>
		</condition>
		<condition property="genericToolset" value="clang">
			<os family="mac"/>
		</condition>
		<condition property="genericToolset" value="gcc">
			<and>
				<os family="unix"/>
				<not><os family="mac"/></not>
			</and>
		</condition>

		<!-- Extract the list of build params from the build.properties file -->
		<loadfile property="buildParamList" srcFile="${buildPropFile}">
			<filterchain>
				<striplinecomments>
					<comment value="#"/>
				</striplinecomments>
				<tokenfilter delimoutput="|">
					<containsregex pattern="nativeBuildParams[ \t]*=" replace="" flags="g"/>
					<containsregex pattern="toolset=${genericToolset}"/>
					<trim/>
					<ignoreblank/>
				</tokenfilter>
			</filterchain>
		</loadfile>

		<!-- Run the native build for each set of build parameters -->
		<delete file="${deployableServersFile}"/>
		<delete file="${antRunnableServersFile}"/>
		<foreach list="${buildParamList}" target="deliverArtifactsForOneParamSet"
			param="buildParams" delimiter="|" inheritall="true"/>
	</target>

	<!-- Expects buildParams as a parameter -->
	<target name="deliverArtifactsForOneParamSet">
		<mkdir dir="${binDir}"/>
		<echo message="Build params:     '${buildParams}'"/>

		<!-- Extract the variant (debug or release) and variantSuffix from the build parameters -->
		<propertyregex property="variant"
			input="${buildParams}"
			regexp="^.*variant=(debug|release)\b.*$"
			select="\1"
			casesensitive="false"/>
		<condition property="variantSuffix" value="-d" else="">
			<equals arg1="${variant}" arg2="debug"/>
		</condition>
		<echo message="variant:          '${variant}'"/>
		<echo message="variantSuffix:    '${variantSuffix}'"/>

		<!-- Extract the bitness (32 or 64) from the build parameters -->
		<propertyregex property="addrModel"
			input="${buildParams}"
			regexp="^.*address-model=(64|32)\b.*$"
			replace="\1"
			casesensitive="false"
			defaultValue="universal"/>
		<switch value="${addrModel}">
			<case value="32">
				<property name="addrModelSuffix" value="-x32"/>
			</case>
			<case value="64">
				<property name="addrModelSuffix" value="-x64"/>
			</case>
			<default>
				<property name="addrModelSuffix" value="-x32_64"/>
			</default>
		</switch>
		<echo message="addrModel:        '${addrModel}'"/>
		<echo message="addrModelSuffix:  '${addrModelSuffix}'"/>

		<!-- Compute the deployable server directory name under artifacts -->
		<condition property="deployableSvrDir"
				value="parliament-${parliamentVersion}-${platform}${variantSuffix}"
				else="parliament-${parliamentVersion}-${platform}${variantSuffix}-${addrModel}">
			<equals arg1="${addrModel}" arg2="universal"/>
		</condition>
		<echo message="deployableSvrDir  '${deployableSvrDir}'"/>
		<echo message="${deployableSvrDir}${line.separator}"
			file="${deployableServersFile}"
			append="true"/>
		<if>
			<or>
				<equals arg1="${addrModel}" arg2="universal"/>
				<equals arg1="${addrModel}" arg2="${sun.arch.data.model}"/>
			</or>
			<then>
				<echo message="${deployableSvrDir}${line.separator}"
					file="${antRunnableServersFile}"
					append="true"/>
			</then>
		</if>

		<!-- Run the actual native build -->
		<antcall target="buildNativeForOneParamSet"/>

		<if>
			<os family="windows"/>
			<then>
				<!-- Copy redistributable packages to the deployable server directory -->
				<condition property="redistPath" value="${env.VS_REDIST_PATH_64}" else="${env.VS_REDIST_PATH_32}">
					<equals arg1="${addrModel}" arg2="64"/>
				</condition>
				<copy todir="${targetDir}/${deployableSvrDir}/RedistributablePackages" file="${redistPath}"/>

				<!-- Build service EXE into the deployable server directory -->
				<antcall target="buildWinDaemonApp"/>
			</then>
			<else>
				<!-- Build daemon app into the deployable server directory -->
				<antcall target="buildUnixDaemonApp"/>
			</else>
		</if>

		<!-- Run the tests, if needed and if possible -->
		<uptodate property="junitResultIsUpToDate" targetfile="${junitFlagFile}">
			<srcfiles dir="${targetDir}/${deployableSvrDir}"/>
		</uptodate>
		<if>
			<and>
				<not><isset property="junitResultIsUpToDate"/></not>
				<or>
					<equals arg1="${addrModel}" arg2="universal"/>
					<equals arg1="${addrModel}" arg2="${sun.arch.data.model}"/>
				</or>
			</and>
			<then>
				<antcall target="runTests"/>
			</then>
			<else>
				<if>
					<isset property="junitResultIsUpToDate"/>
					<then>
						<echo message="Java unit test result is up-to-date"/>
					</then>
					<else>
						<echo message="Skipping the Java unit tests because the native binaries are not compatible with the current JVM"/>
					</else>
				</if>
			</else>
		</if>
	</target>

	<!-- Expects buildParams and deployableSvrDir to be set -->
	<target name="buildNativeForOneParamSet">
		<exec executable="b2" dir="${basedir}/KbCore" failonerror="true">
			<arg value="-q"/>
			<arg value="-j4"/>
			<arg line="${buildParams}"/>
		</exec>
		<delete dir="${targetDir}/drop-box" quiet="true"/>
		<exec executable="b2" dir="${basedir}/AdminClient" failonerror="true">
			<arg value="-q"/>
			<arg value="-j4"/>
			<arg line="${buildParams}"/>
			<env key="ADMIN_CLIENT_INSTALL_DIR" value="${targetDir}/${deployableSvrDir}/bin"/>
		</exec>
		<antcall target="fixMacOSInstallNames">
			<param name="dylibDir" value="${targetDir}/${deployableSvrDir}/bin"/>
		</antcall>
		<if>
			<isset property="skipNativeUnitTest"/>
			<then>
				<echo message="##############################################"/>
				<echo message="#####   Skipping the native unit tests   #####"/>
				<echo message="##############################################"/>
			</then>
			<else>
				<exec executable="b2" dir="${basedir}/Test" failonerror="true">
					<arg value="-q"/>
					<arg value="-j4"/>
					<arg line="${buildParams}"/>
				</exec>
			</else>
		</if>

		<antcall target="fixupNativeArtifacts">
			<param name="toDir" value="${targetDir}/${deployableSvrDir}"/>
		</antcall>
	</target>

	<target name="testWhetherIsMacOS">
		<condition property="isOsMacintosh">
			<os family="mac"/>
		</condition>
	</target>

	<!-- Expects dylibDir to be set -->
	<target name="fixMacOSInstallNames" depends="testWhetherIsMacOS" if="isOsMacintosh">
		<propertyregex property="boostVer"
			input="${env.BOOST_VERSION}"
			regexp="_0$$"
			replace=""
			casesensitive="false"
			defaultValue="${env.BOOST_VERSION}"/>
		<property name="boostLibSuffix"
			value="-clang-darwin12-mt${variantSuffix}${addrModelSuffix}-${boostVer}.dylib"/>

		<antcall target="changeInstallName">
			<param name="dylibDir" value="${dylibDir}"/>
			<param name="callingBinary" value="ParliamentAdmin"/>
			<param name="calledBinary" value="libboost_filesystem${boostLibSuffix}"/>
		</antcall>
		<antcall target="changeInstallName">
			<param name="dylibDir" value="${dylibDir}"/>
			<param name="callingBinary" value="ParliamentAdmin"/>
			<param name="calledBinary" value="libParliament.dylib"/>
		</antcall>

		<antcall target="changeInstallName">
			<param name="dylibDir" value="${dylibDir}"/>
			<param name="callingBinary" value="libParliament.dylib"/>
			<param name="calledBinary" value="libdb-${env.BDB_VERSION}.dylib"/>
			<param name="oldCalledBinaryDir" value="${env.BDB_HOME}/lib"/>
		</antcall>
		<antcall target="changeInstallName">
			<param name="dylibDir" value="${dylibDir}"/>
			<param name="callingBinary" value="libParliament.dylib"/>
			<param name="calledBinary" value="libboost_atomic${boostLibSuffix}"/>
		</antcall>
		<antcall target="changeInstallName">
			<param name="dylibDir" value="${dylibDir}"/>
			<param name="callingBinary" value="libParliament.dylib"/>
			<param name="calledBinary" value="libboost_chrono${boostLibSuffix}"/>
		</antcall>
		<antcall target="changeInstallName">
			<param name="dylibDir" value="${dylibDir}"/>
			<param name="callingBinary" value="libParliament.dylib"/>
			<param name="calledBinary" value="libboost_filesystem${boostLibSuffix}"/>
		</antcall>
		<antcall target="changeInstallName">
			<param name="dylibDir" value="${dylibDir}"/>
			<param name="callingBinary" value="libParliament.dylib"/>
			<param name="calledBinary" value="libboost_log${boostLibSuffix}"/>
		</antcall>
		<antcall target="changeInstallName">
			<param name="dylibDir" value="${dylibDir}"/>
			<param name="callingBinary" value="libParliament.dylib"/>
			<param name="calledBinary" value="libboost_log_setup${boostLibSuffix}"/>
		</antcall>
		<antcall target="changeInstallName">
			<param name="dylibDir" value="${dylibDir}"/>
			<param name="callingBinary" value="libParliament.dylib"/>
			<param name="calledBinary" value="libboost_thread${boostLibSuffix}"/>
		</antcall>

		<antcall target="changeInstallName">
			<param name="dylibDir" value="${dylibDir}"/>
			<param name="callingBinary" value="libboost_log_setup${boostLibSuffix}"/>
			<param name="calledBinary" value="libboost_atomic${boostLibSuffix}"/>
		</antcall>
		<antcall target="changeInstallName">
			<param name="dylibDir" value="${dylibDir}"/>
			<param name="callingBinary" value="libboost_log_setup${boostLibSuffix}"/>
			<param name="calledBinary" value="libboost_chrono${boostLibSuffix}"/>
		</antcall>
		<antcall target="changeInstallName">
			<param name="dylibDir" value="${dylibDir}"/>
			<param name="callingBinary" value="libboost_log_setup${boostLibSuffix}"/>
			<param name="calledBinary" value="libboost_filesystem${boostLibSuffix}"/>
		</antcall>
		<antcall target="changeInstallName">
			<param name="dylibDir" value="${dylibDir}"/>
			<param name="callingBinary" value="libboost_log_setup${boostLibSuffix}"/>
			<param name="calledBinary" value="libboost_log${boostLibSuffix}"/>
		</antcall>
		<antcall target="changeInstallName">
			<param name="dylibDir" value="${dylibDir}"/>
			<param name="callingBinary" value="libboost_log_setup${boostLibSuffix}"/>
			<param name="calledBinary" value="libboost_thread${boostLibSuffix}"/>
		</antcall>

		<antcall target="changeInstallName">
			<param name="dylibDir" value="${dylibDir}"/>
			<param name="callingBinary" value="libboost_log${boostLibSuffix}"/>
			<param name="calledBinary" value="libboost_atomic${boostLibSuffix}"/>
		</antcall>
		<antcall target="changeInstallName">
			<param name="dylibDir" value="${dylibDir}"/>
			<param name="callingBinary" value="libboost_log${boostLibSuffix}"/>
			<param name="calledBinary" value="libboost_chrono${boostLibSuffix}"/>
		</antcall>
		<antcall target="changeInstallName">
			<param name="dylibDir" value="${dylibDir}"/>
			<param name="callingBinary" value="libboost_log${boostLibSuffix}"/>
			<param name="calledBinary" value="libboost_filesystem${boostLibSuffix}"/>
		</antcall>
		<antcall target="changeInstallName">
			<param name="dylibDir" value="${dylibDir}"/>
			<param name="callingBinary" value="libboost_log${boostLibSuffix}"/>
			<param name="calledBinary" value="libboost_thread${boostLibSuffix}"/>
		</antcall>
	</target>

	<!-- Expects dylibDir, callingBinary, calledBinary, and oldCalledBinaryDir to be set -->
	<target name="changeInstallName">
		<condition property="oldCalledBinaryDir" value="${oldCalledBinaryDir}" else="@rpath">
			<isset property="oldCalledBinaryDir"/>
		</condition>
		<!--
		<echo message="   ${oldCalledBinaryDir}/${calledBinary}"/>
		<echo message="   @loader_path/${calledBinary}"/>
		<echo message="   ${callingBinary}"/>
		-->
		<exec executable="install_name_tool" dir="${dylibDir}" failonerror="true" osfamily="mac">
			<arg value="-change"/>
			<arg value="${oldCalledBinaryDir}/${calledBinary}"/>
			<arg value="@loader_path/${calledBinary}"/>
			<arg value="${callingBinary}"/>
		</exec>
	</target>

	<!--
		Performs a few "fixup" actions on a native build products directory
		(as specified by ${toDir}) after that directory has been created by
		the buildNativeForOneParamSet target.  Expects parameter toDir.
	-->
	<target name="fixupNativeArtifacts">
		<copy todir="${toDir}" preservelastmodified="true" flatten="true">
			<fileset dir="${basedir}/KbCore" includes="Parliament*Config.txt"/>
		</copy>
		<chmod file="${toDir}/bin/ParliamentAdmin" perm="ugo+rx" osfamily="unix" verbose="true"/>
	</target>

	<target name="jar" depends="compileJava">
		<mkdir dir="${artifactsDir}"/>
		<jar destfile="${jarFile}" basedir="${binDir}"/>
	</target>

	<target name="compileJava" depends="resolve">
		<mkdir dir="${binDir}"/>
		<javac srcdir="${basedir}/java" destdir="${binDir}" debug="on" deprecation="on"
				includeAntRuntime="false">
			<classpath>
				<fileset dir="${basedir}/lib/default" includes="*.jar"/>
			</classpath>
			<compilerarg value="-Xlint:all"/>
			<compilerarg value="-h"/>
			<compilerarg value="${jniHdrDir}"/>
		</javac>
	</target>

	<target name="compileJavaTests" depends="jar">
		<mkdir dir="${testBinDir}"/>
		<javac destdir="${testBinDir}" srcdir="${basedir}/javaTest" debug="on" deprecation="on"
				includeAntRuntime="false">
			<include name="**/*.java"/>
			<classpath>
				<pathelement location="${jarFile}"/>
				<fileset dir="${basedir}/lib/test" includes="*.jar"/>
			</classpath>
			<compilerarg value="-Xlint:all"/>
		</javac>
	</target>

	<!-- called from deliverArtifactsForOneParamSet - do not invoke externally -->
	<target name="runTests" depends="createTestConfig,compileJavaTests">
		<echo message="Native artifacts directory:  '${deployableSvrDir}'"/>
		<mkdir dir="${reportsDir}/${deployableSvrDir}"/>
		<junitlauncher printsummary="yes" haltonfailure="yes">
			<classpath>
				<pathelement location="${testBinDir}"/>
				<pathelement location="${jarFile}"/>
				<fileset dir="${basedir}/lib/test" includes="*.jar"/>
			</classpath>
			<listener type="legacy-xml" outputdir="${reportsDir}/${deployableSvrDir}"
				sendSysErr="true" sendSysOut="true"/>
			<testclasses>
				<fileset dir="${testBinDir}" includes="**/*Test.class"/>
				<fork>
					<env key="LD_LIBRARY_PATH" path="${targetDir}/${deployableSvrDir}/bin;${env.LD_LIBRARY_PATH}"/>
					<env key="PATH" path="${targetDir}/${deployableSvrDir}/bin;${env.PATH}"/>
					<env key="PARLIAMENT_KB_CONFIG_PATH" value="${testKbConfigFile}"/>
					<env key="PARLIAMENT_LOG_CONFIG_PATH" value="${testLogConfigFile}"/>

					<!-- These env vars are for running under clang's 'santizer' options: -->
					<!-- env key="DYLD_INSERT_LIBRARIES" path="/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/10.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib"/ -->
					<!-- env key="UBSAN_OPTIONS" value="print_stacktrace=1"/ -->

					<sysproperty key="java.library.path" value="${targetDir}/${deployableSvrDir}/bin"/>
					<sysproperty key="log4j.configuration" value="file://${kbRootDir}/log4j.junit.properties"/>
				</fork>
			</testclasses>
		</junitlauncher>
		<touch file="${junitFlagFile}" mkdirs="true"/>
	</target>

	<!--
	Build the procrun service executable.  Use only on Windows.
	Expects addrModel, and deployableSvrDir to be set.
	-->
	<target name="buildWinDaemonApp" depends="daemonAppUpToDateCheck,unpackDaemonArchive"
		unless="isDaemonAppUpToDate">

		<condition property="vsBatPath" value="${env.VS_BAT_PATH_64}" else="${env.VS_BAT_PATH_32}">
			<equals arg1="${addrModel}" arg2="64"/>
		</condition>
		<condition property="nmakeArg" value="CPU=X64" else="CPU=X86">
			<equals arg1="${addrModel}" arg2="64"/>
		</condition>

		<exec executable="${env.ComSpec}">
			<arg value="/c"/>
			<arg value='"'/>
			<arg file="${vsBatPath}" prefix='"' suffix='"'/>
			<arg value="&amp;"/>
			<arg value="cd"/>
			<arg value="/d"/>
			<arg file="${untarPath}/windows/apps/prunsrv" prefix='"' suffix='"'/>
			<arg value="&amp;"/>
			<arg value="nmake"/>
			<arg value="${nmakeArg}"/>
			<arg value='"'/>
		</exec>

		<copy todir="${targetDir}/${deployableSvrDir}/bin" overwrite="true" flatten="true">
			<fileset dir="${untarPath}/windows/apps/prunsrv" includes="**/prunsrv.exe"/>
		</copy>
		<move file="${targetDir}/${deployableSvrDir}/bin/prunsrv.exe"
			tofile="${targetDir}/${deployableSvrDir}/bin/ParliamentService.exe"
			overwrite="true"/>
		<delete dir="${daemonBinDir}"/>
	</target>

	<!--
	Build the jsvc daemon executable.  Use only on UNIX or Linux.
	Expects addrModel, and deployableSvrDir to be set.
	-->
	<target name="buildUnixDaemonApp" depends="daemonAppUpToDateCheck,unpackDaemonArchive"
		unless="isDaemonAppUpToDate">

		<condition property="flags" value="-arch x86_64" else="-m${addrModel}">
			<equals arg1="${addrModel}" arg2="universal"/>
		</condition>
		<condition property="ccValue" value="clang" else="">
			<os family="mac"/>
		</condition>

		<chmod file="${untarPath}/unix/configure" perm="ugo+rx"
			osfamily="unix" verbose="true"/>
		<exec executable="./configure" dir="${untarPath}/unix">
			<env key="CFLAGS" value="${flags}"/>
			<env key="LDFLAGS" value="${flags}"/>
			<env key="CC" value="${ccValue}"/>
		</exec>
		<exec executable="make" dir="${untarPath}/unix"/>
		<move file="${untarPath}/unix/jsvc"
			todir="${targetDir}/${deployableSvrDir}/bin"/>
		<chmod file="${targetDir}/${deployableSvrDir}/bin/jsvc" perm="ugo+rx" verbose="true"/>

		<copy todir="${targetDir}/${deployableSvrDir}/lib">
			<fileset dir="${basedir}/lib/default" includes="commons-daemon-*.jar"/>
		</copy>

		<delete dir="${daemonBinDir}"/>
	</target>

	<target name="unpackDaemonArchive" depends="daemonAppUpToDateCheck"
		unless="isDaemonAppUpToDate">

		<mkdir dir="${daemonBinDir}"/>
		<delete>
			<dirset dir="${daemonBinDir}" includes="commons-daemon-*"/>
		</delete>

		<for param="tarFile">
			<fileset dir="${basedir}/lib/default" includes="**/commons-daemon-*.tar.gz"/>
			<sequential>
				<untar src="@{tarFile}" dest="${daemonBinDir}" compression="gzip"/>
			</sequential>
		</for>

		<for param="tarDir">
			<dirset dir="${daemonBinDir}" includes="commons-daemon-*"/>
			<sequential>
				<property name="untarPath" value="@{tarDir}"/>
			</sequential>
		</for>
	</target>

	<target name="daemonAppUpToDateCheck">
		<condition property="isDaemonAppUpToDate">
			<or>
				<and>
					<os family="windows"/>
					<uptodate targetfile="${targetDir}/${deployableSvrDir}/bin/ParliamentService.exe">
						<srcfiles dir="${basedir}/lib/default" includes="commons-daemon-*.tar.gz"/>
					</uptodate>
				</and>
				<and>
					<not><os family="windows"/></not>
					<uptodate targetfile="${targetDir}/${deployableSvrDir}/bin/jsvc">
						<srcfiles dir="${basedir}/lib/default" includes="commons-daemon-*.tar.gz"/>
					</uptodate>
				</and>
			</or>
		</condition>
	</target>
</project>
