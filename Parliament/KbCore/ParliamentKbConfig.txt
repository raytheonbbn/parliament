#####   Data file options   #####

kbDirectoryPath        = kb-data
stmtFileName           = statements.mem
rsrcFileName           = resources.mem
uriTableFileName       = uris.mem
uriToIntFileName       = u2i.db

readOnly               = no
fileSyncTimerDelay     = 15000
initialRsrcCapacity    = 300000
avgRsrcLen             = 100
rsrcGrowthIncrement    = 600000
rsrcGrowthFactor       = 0
initialStmtCapacity    = 500000
stmtGrowthIncrement    = 1000000
stmtGrowthFactor       = 0

# The amount of memory to be devoted to the Berkeley DB cache.  The portion before
# the comma is the total cache size (with a k for kilobytes, m for megabytes, g for
# gigabytes).  The portion after the comma specifies how many segments the memory
# should be broken across, for compatibility with systems that limit the size of
# single memory allocations.
bdbCacheSize           = 256m,1

# If upgrading a triple store from version 2.7.9 or prior, either set this option
# to "no" or export, clear, and then restore the backup:
normalizeTypedStringLiterals = yes

# Query execution configuration. Valid units are "nanoseconds", "microseconds",
# "milliseconds", "seconds", "minutes", "hours", and "days".
TimeoutDuration        = 5
TimeoutUnit            = minutes



#####   Rule engine configuration   #####

runAllRulesAtStartup   = no
enableSWRLRuleEngine   = no

# Sets up the following rules:
# * "A is a subclass of B" ^ "B is a subclass of C" ==> "A is a subclass of C"
# * "X is of type A" ^ "A is a subclass of B" ==> "X is of type B"
# * If inferRdfsClass is true: "A is a subclass of B" ==> "A and B are of type rdfs:Class"
# * If inferOwlClass is true: "A is a subclass of B" ==> "A and B are of type owl:Class"
# * If inferRdfsResource is true: "A is a subclass of B" ==> "A and B are subclasses of rdfs:Resource"
# * If inferOwlThing is true: "A is a subclass of B" ==> "A and B are subclasses of owl:Thing"
SubclassRule           = on
inferRdfsClass         = off
inferOwlClass          = off
inferRdfsResource      = off
inferOwlThing          = off

# Sets up the following rules:
# * "P is a subproperty of Q" ^ "Q is a subproperty of R" ==> "P is a subproperty of R"
# * "P is a subproperty of Q" ^ "P(X, Y)" ==> "Q(X, Y)"
SubpropertyRule        = on

# Sets up the following rule:
# * "P has domain C" ^ "P(X, Y)" ==> "X is of type C"
DomainRule             = on

# Sets up the following rule:
# * "P has range C" ^ "P(X, Y)" ==> "Y is of type C"
RangeRule              = on

# Sets up the following rule:
# * "A is equivalent to B" ==> "A is a subclass of B" ^ "B is a subclass of A"
EquivalentClassRule    = on

# Sets up the following rule:
# * "P is equivalent to Q" ==> "P is a subproperty of Q" ^ "Q is a subproperty of P"
EquivalentPropRule     = on

# Sets up the following rule:
# * "P is the inverse of Q" ^ "P(X, Y)" ==> "Q(Y, X)"
InverseOfRule          = on

# Sets up the following rule:
# * "P is symmetric" ^ "P(X, Y)" ==> "P(Y, X)"
SymmetricPropRule      = on

# Sets up the following rule:
# * "P is a functional property" ^ "P(Z, X)" ^ "P(Z, Y)" ==> "owl:sameAs(X, Y)"
FunctionalPropRule     = off

# Sets up the following rule:
# * "P is an inverse functional property" ^ "P(X, Z)" ^ "P(Y, Z)" ==> "owl:sameAs(X, Y)"
InvFunctionalPropRule  = off

# Sets up the following rule:
# * "P is a transitive property" ^ "P(X, Y)" ^ "P(Y, Z)" ==> "P(X, Z)"
TransitivePropRule     = on
