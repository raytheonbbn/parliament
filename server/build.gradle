plugins {
	id 'org.springframework.boot' version '2.7.8'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'java'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

ext {
	genJavaDir = file("$buildDir/generated/sources/java")
	configVocabFile = "${projectDir}/src/main/resources/config-ont.ttl"
	configVocabPackage = 'com.bbn.parliament.server.configuration.vocab'
	configVocabDir = configVocabPackage.replaceAll(/\./, '/')
	configVocabClassNm = 'ConfigOnt'
	configVocabSource = "${genJavaDir}/${configVocabDir}/${configVocabClassNm}.java"
}

dependencies {
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation project(':jena:SparqlQueryBuilder')
	implementation fileTree(dir: artifactsDir, include: [
		'KbGraph.jar',
		'ParliamentClient.jar',
		'NumericIndex.jar',
		'Parliament.jar',
		'SpatialIndexProcessor.jar',
		'TemporalIndexProcessor.jar'
	])

	implementation "$commonsCsvDependency"
	implementation "$commonsIoDependency"
	implementation "$commonsLangDependency"
	implementation "$jenaArqDependency"
	implementation "$slf4jApiDependency"
	implementation 'org.springframework.boot:spring-boot-starter-web'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
}

sourceSets {
	main {
		java { srcDir genJavaDir }
	}
}

configurations {
	schemagen
}

dependencies {
	schemagen "$jenaCmdsDependency"
	schemagen 'org.apache.logging.log4j:log4j-slf4j-impl:2.20.0'
}

// See https://jena.apache.org/documentation/tools/schemagen.html
task runSchemagen(type: JavaExec) {
	inputs.file(configVocabFile)
	outputs.file(configVocabSource)

	classpath = configurations.schemagen
	mainClass = 'jena.schemagen'
	args = [
		'-i', configVocabFile,
		'-o', "${genJavaDir}",
		'--owl',
		'-n', configVocabClassNm,
		'--package', configVocabPackage
	]
}

compileJava.dependsOn runSchemagen

java {
	withSourcesJar()
	withJavadocJar()
}

javadoc {
	source = sourceSets.main.allJava
	classpath = configurations.compileClasspath
	dependsOn runSchemagen

	options
	{
		//setMemberLevel JavadocMemberLevel.PUBLIC
		//setAuthor true
		addStringOption('Xdoclint:-missing', '-quiet')
	}
}

tasks.getByName('sourcesJar') {
	from sourceSets.main.allSource
	dependsOn runSchemagen
}

clean {
	delete "${projectDir}/kb-data"
	delete "${projectDir}/log"
}

test {
	useJUnitPlatform()
	//maxHeapSize = "2g"	// maximum heap size
	//jvmArgs '-Xmx1g'	// mem argument for the test JVM

	def distroDir = targetDir.listFiles().find { it.name =~ /^parliament-[.0-9]+-.*$/ }

	systemProperty 'java.library.path', "${distroDir}/bin"
	systemProperty 'test.data.path', "${rootDir}/dependencies/data"
	//systemProperty 'log4j.configuration', "file:${rootDir}/log4j.junit.properties"

	workingDir = buildDir
}

bootRun {
	def distroDir = targetDir.listFiles().find { it.name =~ /^parliament-[.0-9]+-.*$/ }

	systemProperty 'java.library.path', "${distroDir}/bin"
}
