prefix dct:  <http://purl.org/dc/terms/>
prefix owl:  <http://www.w3.org/2002/07/owl#>
prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

delete {
	?restrictionBearer ?incomingPredicate ?r .
	?r a owl:Restriction ;
		owl:onProperty ?prop ;
		?rPredicate ?rValue ;
		owl:onClass ?class ;
		owl:onDataRange ?dataRange ;
		dct:description ?description .
} insert {
	?restrictionBearer ?incomingPredicate ?rIri .
	?rIri a owl:Restriction ;
		owl:onProperty ?prop ;
		?rPredicate ?rValue ;
		owl:onClass ?class ;
		owl:onDataRange ?dataRange ;
		dct:description ?description .
} where {
	values ?incomingPredicate {
		rdfs:subClassOf	# the usual case
		rdf:first			# for restrictions in lists
		owl:equivalentClass
	}
	values ?rPredicate {
		owl:allValuesFrom
		owl:hasValue
		owl:cardinality
		owl:maxCardinality
		owl:minCardinality
		owl:someValuesFrom
		owl:qualifiedCardinality
		owl:minQualifiedCardinality
		owl:maxQualifiedCardinality
		owl:hasSelf
	}
	?restrictionBearer ?incomingPredicate ?r .
	?r a owl:Restriction ;
		owl:onProperty ?prop ;
		?rPredicate ?rValue .
	optional { ?r owl:onClass ?class . }
	optional { ?r owl:onDataRange ?dataRange . }
	optional { ?r dct:description ?description . }
	filter ( isBlank(?r) && !isBlank(?prop) && !isBlank(?rValue) )
	bind (?_fillNS as ?fillNS)
	bind ( concat(str(?prop), "\n", str(?rPredicate), "\n", str(?rValue), "\n",
		if(bound(?class), str(?class), ""), "\n",
		if(bound(?dataRange), str(?dataRange), "")) as ?toHash )
	bind ( iri(concat(str(?fillNS), "z", sha256(?toHash))) as ?rIri )
}
