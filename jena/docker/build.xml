<?xml version="1.0" encoding="utf-8"?>

<!-- See readme.md for documentation on how to use this build script. -->

<project name="docker" default="build-ubuntu">
	<description>Builds Docker images</description>

	<import file="${basedir}/../../build-common.xml"/>

	<property name="binDir" value="${targetDir}/bin/${ant.project.name}"/>
	<property name="distroDir" value="${targetDir}/distro"/>

	<!--
		Install Java: Check here to get latest Java version before building:
		https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/latest
		https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/latest
	-->
	<property name="javaBaseUrl"
		value="https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/"/>
	<property name="javaUrl"
		value="${javaBaseUrl}jdk8u312-b07/OpenJDK8U-jre_x64_windows_8u312b07.zip"/>

	<target name="clean" description="Removes build products and temporary files">
		<delete dir="${binDir}" includeEmptyDirs="true"/>
		<delete dir="${distroDir}" includes="*-docker.tar.gz"/>
	</target>

	<target name="fetchJavaForWindows" depends="clean">
		<mkdir dir="${binDir}"/>
		<get src="${javaUrl}" dest="${binDir}" verbose="true"/>
		<fileset id="javaFiles" dir="${binDir}" includes="OpenJDK*.zip"/>
		<property name="javaZipFileName" refid="javaFiles"/>
		<echo message="javaZipFileName: ${javaZipFileName}"/>
		<unzip src="${binDir}/${javaZipFileName}" dest="${binDir}"/>
		<dirset id="javaDirs" dir="${binDir}" includes="openjdk*"/>
		<property name="unzippedJavaDir" refid="javaDirs"/>
	</target>

	<target name="fetchDistro" depends="clean">
		<mkdir dir="${binDir}"/>
		<if>
			<not><isset property="distro"/></not>
			<then>
				<fail message="The property 'distro' must be set on the command line."/>
			</then>
		</if>
		<if>
			<matches string="${distro}" pattern="^http"/>
			<then>
				<get src="${distro}" dest="${binDir}" verbose="true"/>
				<fileset id="distroContents" dir="${binDir}" includes="Parliament*.zip"/>
				<property name="zipFileName" refid="distroContents"/>
				<property name="zipFilePath" value="${binDir}/${zipFileName}"/>
			</then>
			<else>
				<property name="zipFilePath" value="${distro}"/>
			</else>
		</if>
		<echo message="zipFilePath: ${zipFilePath}"/>
	</target>

	<target name="unzipDistro" depends="fetchDistro">
		<propertyregex property="fileVersion" input="${zipFilePath}"
			regexp="^.*([0-9]+\.[0-9]+\.[0-9]+).*$" replace="\1"/>
		<echo message="Version: ${fileVersion}"/>
		<unzip src="${zipFilePath}" dest="${binDir}"/>
		<dirset id="distroDirs" dir="${binDir}" includes="Parliament*"/>
		<property name="unzippedDistro" refid="distroDirs"/>
		<property name="dockerDistroDir" value="${binDir}/parliament-${fileVersion}"/>
		<move file="${binDir}/${unzippedDistro}" tofile="${dockerDistroDir}"/>
		<echo message="dockerDistroDir: ${dockerDistroDir}"/>
	</target>

	<target name="prepareContext" depends="unzipDistro">
		<delete dir="${dockerDistroDir}/clientJars"/>
		<delete dir="${dockerDistroDir}/javadoc"/>
		<delete file="${dockerDistroDir}/ParliamentUserGuide.pdf"/>
		<delete dir="${dockerDistroDir}" includes="StartParliament.*"/>

		<if>
			<os family="windows"/>
			<then>
				<replaceregexp file="${dockerDistroDir}/ParliamentKbConfig.txt"
					match="^(kbDirectoryPath *= *)kb-data$"
					replace="\1C:/ProgramData/parliament-data"
					byline="true"/>
				<replaceregexp file="${dockerDistroDir}/parliament.ps1"
					match="^($jettyHost *= *'localhost')"
					replace="#\1"
					byline="true"/>
				<replaceregexp file="${dockerDistroDir}/parliament.ps1"
					match="^#($jettyHost *= *'0.0.0.0')"
					replace="\1"
					byline="true"/>
			</then>
			<else>
				<replaceregexp file="${dockerDistroDir}/ParliamentKbConfig.txt"
					match="^(kbDirectoryPath *= *)kb-data$"
					replace="\1/var/parliament-data"
					byline="true"/>
				<replaceregexp file="${dockerDistroDir}/parliament"
					match="^(JETTY_HOST=localhost)"
					replace="#\1"
					byline="true"/>
				<replaceregexp file="${dockerDistroDir}/parliament"
					match="^#(JETTY_HOST=0.0.0.0)"
					replace="\1"
					byline="true"/>
				<property name="unzippedJavaDir" value=""/>
			</else>
		</if>

		<copy todir="${binDir}">
			<fileset dir="${basedir}" includes="Dockerfile-*"/>
		</copy>
	</target>

	<target name="build-ubuntu" description="Creates an Ubuntu Linux-based Docker image">
		<echo message="Building for Ubuntu"/>
		<antcall target="docker-build">
			<param name="dockerFile" value="Dockerfile-ubuntu"/>
		</antcall>
	</target>

	<target name="build-rhel8" description="Creates an RHEL 8 Linux-based Docker image">
		<echo message="Building for RHEL8"/>
		<antcall target="docker-build">
			<param name="dockerFile" value="Dockerfile-rhel8"/>
		</antcall>
	</target>

	<target name="build-rhel8-ironbank" description="Creates an RHEL 8 Linux (IronBank)-based Docker image">
		<echo message="Building for RHEL8"/>
		<antcall target="docker-build">
			<param name="dockerFile" value="Dockerfile-rhel8-ironbank"/>
		</antcall>
	</target>

	<target name="build-win" depends="fetchJavaForWindows" description="Creates a Windows-based Docker image">
		<echo message="Building for Windows"/>
		<antcall target="docker-build">
			<param name="dockerFile" value="Dockerfile-win"/>
		</antcall>
	</target>

	<!-- Requires dockerFile parameter -->
	<target name="docker-build" depends="prepareContext">
		<propertyregex property="hostOS" input="${dockerFile}"
			regexp="^Dockerfile-(.+)$" replace="\1"/>
		<property name="imageName" value="parliament-${fileVersion}-${hostOS}"/>

		<echo message="Building Docker image '${imageName}'"/>
		<exec executable="docker" dir="${binDir}">
			<arg value="build"/>
			<arg value="-t"/>
			<arg value="${imageName}"/>
			<arg value="-f"/>
			<arg value="${dockerFile}"/>
			<arg value="--build-arg"/>
			<arg value="parliament_version=${fileVersion}"/>
			<arg value="--build-arg"/>
			<arg value="java_dir=${unzippedJavaDir}"/>
			<arg value="."/>
		</exec>

		<echo message="Saving Image"/>
		<exec executable="docker" dir="${distroDir}">
			<arg value="save"/>
			<arg value="${imageName}"/>
			<arg value="-o"/>
			<arg value="${imageName}.tar"/>
		</exec>

		<echo message="Compressing Image"/>
		<delete file="${distroDir}/${imageName}-docker.tar.gz"/>
		<bzip2 destfile="${distroDir}/${imageName}-docker.tar.bz2" src="${distroDir}/${imageName}.tar"/>
		<delete file="${distroDir}/${imageName}.tar"/>

		<!-- echo message="Removing Image from local docker (clean-up)"/>
		<exec executable="docker" dir="${binDir}">
			<arg value="image"/>
			<arg value="rm"/>
			<arg value="${imageName}"/>
		</exec -->
	</target>
</project>
